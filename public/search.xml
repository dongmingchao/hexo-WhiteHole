<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>WAF绕过</title>
      <link href="/2018/03/14/waf-pass/"/>
      <url>/2018/03/14/waf-pass/</url>
      <content type="html"><![CDATA[<p>内网攻击</p><p>更改POST的content-type  x-www-formencoded  — mutipart/data</p><p>写两行 Content-Disposition，后面的语句会生效</p><p>改数据包一次上传两个文件</p><p>Content=Disposition； name=“file”；；filename=“xx.php”，应该是apache，tomcat才有</p><p>filename部分的错误：去掉引号，只留一个引号，单引号</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><h5 id="空白符绕过"><a href="#空白符绕过" class="headerlink" title="空白符绕过"></a>空白符绕过</h5><pre class=" language-regex"><code class="language-regex">union\s+select/\*\w+\*/</code></pre><p>可当成空格来用：%09 0A 0B 00 20 0C A0 /**/</p><p>正则表达式空白符： %09 0A 0B 00 20</p><h5 id="函数分隔符绕过"><a href="#函数分隔符绕过" class="headerlink" title="函数分隔符绕过"></a>函数分隔符绕过</h5><p>concat%250C()</p><h5 id="注释绕过"><a href="#注释绕过" class="headerlink" title="注释绕过"></a>注释绕过</h5><h4 id="路径绕过"><a href="#路径绕过" class="headerlink" title="路径绕过"></a>路径绕过</h4><p>多个../会被拦截，使用./与//与../交替</p><h4 id="文件目录扫描绕过"><a href="#文件目录扫描绕过" class="headerlink" title="文件目录扫描绕过"></a>文件目录扫描绕过</h4>]]></content>
      
      
    </entry>
    
    <entry>
      <title>MongoDB速查</title>
      <link href="/2018/03/06/mongo/"/>
      <url>/2018/03/06/mongo/</url>
      <content type="html"><![CDATA[<h1 id="MongoDB速查"><a href="#MongoDB速查" class="headerlink" title="MongoDB速查"></a>MongoDB速查</h1><p>所有数据库</p><pre class=" language-bash"><code class="language-bash">show dbs</code></pre><p>使用数据库，没有会新建</p><pre class=" language-bash"><code class="language-bash">use <span class="token punctuation">[</span>数据库名<span class="token punctuation">]</span></code></pre><p>所有表</p><pre class=" language-bash"><code class="language-bash">show tables</code></pre><p>所有表内容</p><pre class=" language-bash"><code class="language-bash">db.<span class="token punctuation">[</span>表名<span class="token punctuation">]</span>.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>pretty()</code> 以更好看的形式展现</p><p>创建表</p><pre><code>db.createCollection(name,options)</code></pre><p>[<code>options</code>]</p><ul><li><code>capped</code> : bool [false] =&gt; true 创建固定大小的表，同时指定size</li><li><code>size</code> : int =&gt; 指定最大值</li><li><code>max</code> : int =&gt; 指定最多条目的数量</li><li><code>autoIndexId</code> : bool [false]  =&gt; 自动创建_id索引</li></ul><p>添加文档</p><pre class=" language-bash"><code class="language-bash">db.<span class="token punctuation">[</span>表名<span class="token punctuation">]</span>.insert<span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><p>删除文档</p><pre class=" language-bash"><code class="language-bash">db.<span class="token punctuation">[</span>表名<span class="token punctuation">]</span>.remove<span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><p>更新文档</p><pre class=" language-bash"><code class="language-bash">db.<span class="token punctuation">[</span>表名<span class="token punctuation">]</span>.update<span class="token punctuation">(</span>oldObj,<span class="token punctuation">{</span><span class="token punctuation">[</span>updateMethod<span class="token punctuation">]</span>:newObj<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>[<code>updateMethod</code>]</p><ul><li><p>$set =&gt; 用法：{ $set : { field : value } }<br>就是相当于sql的set field = value，全部数据类型都支持$set。</p></li><li><p>$inc =&gt; 用法：{ $inc : { field : value } }<br>意思对一个数字字段field增加value</p></li><li><p>$unset =&gt; 用法：{ $unset : { field : 1} }<br>删除字段</p></li><li><p>$push =&gt; 用法：{ $push : { field : value } }</p><p>把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去.</p></li><li><p>$pushAll =&gt; 用法：{ $pushAll : { field : value_array } }<br>同$push,只是一次可以追加多个值到一个数组字段内。</p></li><li><p>$addToSet =&gt; 用法：{ $addToSet : { field : value } }</p><p>增加一个值到数组内，而且只有当这个值不在数组内才增加。</p></li><li><p>$pop =&gt; 用法：删除最后一个值：{ $pop : { field : 1 } }<br>删除第一个值：{ $pop : { field : -1  } }<br>注意，只能删除一个值，也就是说只能用1或-1，而不能用2或-2来删除两条。mongodb 1.1及以后的版本才可以用。</p></li><li><p>$pull =&gt; 用法：{$pull : { field : value } }</p><p>从数组field内删除一个等于value值。</p></li><li><p>$pullAll =&gt; 用法：{ $pullAll : { field : value_array } }</p><p>同$pull,可以一次删除数组内的多个值。</p></li><li><p>$ =&gt; 只使用在oldObj是一个数组的时候，相当于oldObj，默认只匹配第一个</p></li><li><p>$[] =&gt; </p><p>用法：类似$，但是匹配所有符合条件的结果</p></li></ul><p>更多骚操作参考<a href="https://docs.mongodb.com/manual/reference/operator/update/positional-all/" target="_blank" rel="noopener">官方更新操作符</a></p>]]></content>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 速查 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web的漏洞整理</title>
      <link href="/2018/02/19/webbug/"/>
      <url>/2018/02/19/webbug/</url>
      <content type="html"><![CDATA[<h1 id="Web相关的漏洞简单整理"><a href="#Web相关的漏洞简单整理" class="headerlink" title="Web相关的漏洞简单整理"></a>Web相关的漏洞简单整理</h1><p>想起多少写多少。。。</p><ol><li><h3 id="PHP数组绕过"><a href="#PHP数组绕过" class="headerlink" title="PHP数组绕过"></a>PHP数组绕过</h3><p> 碰到有检测参数是否为数组，可以构建<code>file[key]=value&amp;file[key2]=value2</code>这样的报文构建payload对象来绕过</p></li><li><h3 id="PHP序列化"><a href="#PHP序列化" class="headerlink" title="PHP序列化"></a>PHP序列化</h3><p> 生效范围：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10<br> <code>O:4:&quot;Demo&quot;:1:{s:4:&quot;data&quot;;s:15:&quot;malicious value&quot;;}</code>反序列化的时候如果将第一个4改为较大的数即可绕过<code>__wakeup()</code></p></li><li><h3 id="PHP序列化-session"><a href="#PHP序列化-session" class="headerlink" title="PHP序列化+session"></a>PHP序列化+session</h3><p> 注意以下几个函数</p><pre class=" language-php"><code class="language-php"> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php_binary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 在不同页面靠session传值，如果以上函数出现且设置的值不同，则可能存在该漏洞，可使用<code>session_encode()</code>函数查看不同序列化引擎的不同结果</p></li><li><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p> 注意是否有类似json的交互，content-type是否可改动</p></li><li><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p> 反斜杠使单引号失效的解决方法：在单引号前加%df</p><pre class=" language-mysql"><code class="language-mysql"> order by #测列数 and 1=2 union select 1,2,3 # 测可显示列 select table_name from infomation_schema.tables where table_schema=database() #获取表名 select group_concat(table_name) from infomation_schema.tables where table_schema=database() #获取所有表名 select group_concat(column_name) from infomation_schema.columns where table_name=char() #获取所有字段名</code></pre><p> ​</p></li><li><h3 id="源码泄漏"><a href="#源码泄漏" class="headerlink" title="源码泄漏"></a>源码泄漏</h3><p> 一般网站都会有的防爬文件robots.txt</p><p> Apache的.htaccess文件</p><p> 文件后缀.filename.swp .bak之类</p><p> Git遗留</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XML外部实体注入漏洞</title>
      <link href="/2018/02/19/xxe/"/>
      <url>/2018/02/19/xxe/</url>
      <content type="html"><![CDATA[<h1 id="XML外部实体注入漏洞（XXE）"><a href="#XML外部实体注入漏洞（XXE）" class="headerlink" title="XML外部实体注入漏洞（XXE）"></a>XML外部实体注入漏洞（XXE）</h1><ol><li><h2 id="存在版本"><a href="#存在版本" class="headerlink" title="存在版本"></a>存在版本</h2> libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡。PHP版本并不影响XXE利用。</li><li><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><ol><li><p>什么是XML外部实体？</p><p> 如果你了解XML，你可以把XML理解为一个用来定义数据的东东。因此，两个采用不同技术的系统可以通过XML进行通信和交换数据。 比如，下图就是一个用来描述一个职工的XML文档样本，其中的’name’,’salary’,’address’被称为XML的元素。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>employee</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>DedSec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>salary</span><span class="token punctuation">></span></span>0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>salary</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span>China<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>employee</span><span class="token punctuation">></span></span></code></pre><p> 有些XML文档包含system标识符定义的“实体”，这些XML文档会在DOCTYPE头部标签中呈现。这些定义的’实体’能够访问本地或者远程的内容。比如，下面的XML文档样例就包含了XML ‘实体’。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE foo [ &lt;!ENTITY entityex SYSTEM "file:///etc/passwd"></span> ]> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abc</span><span class="token punctuation">></span></span><span class="token entity" title="&entityex;">&amp;entityex;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>abc</span><span class="token punctuation">></span></span></code></pre><p> 在上面的代码中， XML外部实体 ‘entityex’ 被赋予的值为：file://etc/passwd。在解析XML文档的过程中，实体’entityex’的值会被替换为URI(file://etc/passwd)内容值（也就是passwd文件的内容）。 关键字’SYSTEM’会告诉XML解析器，’entityex’实体的值将从其后的URI中读取。因此，XML实体被使用的次数越多，越有帮助。</p></li><li><p>什么是XML外部实体攻击？</p><p> 有了XML实体，关键字’SYSTEM’会令XML解析器从URI中读取内容，并允许它在XML文档中被替换。因此，攻击者可以通过实体将他自定义的值发送给应用程序，然后让应用程序去呈现。 简单来说，攻击者强制XML解析器去访问攻击者指定的资源内容（可能是系统上本地文件亦或是远程系统上的文件）。比如，下面的代码将获取系统上folder/file的内容并呈献给用户。</p><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>  <span class="token doctype">&lt;!DOCTYPE xxe [ &lt;!ENTITY xxe SYSTEM "file:///folder/file" ></span>]> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abc</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>abc</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><h2 id="如何发现"><a href="#如何发现" class="headerlink" title="如何发现"></a>如何发现</h2> <img src="https://res.dedsec.club/php_xxe/check.png" alt="check"><br> <img src="https://res.dedsec.club/php_xxe/attack.png" alt="attack"></li><li><h2 id="亲手试试"><a href="#亲手试试" class="headerlink" title="亲手试试"></a><a href="http://ctf.dedsec.club/cans/php_xxe/simplexml_load_string.php" target="_blank" rel="noopener">亲手试试</a></h2></li><li><h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2> 此漏洞非常危险, 因为此漏洞会造成服务器上敏感数据的泄露，和潜在的服务器拒绝服务攻击。</li><li><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><ul><li>任意文件读取<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY ></span>&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre></li><li>DDos<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE lolz [  &lt;!ENTITY lol "lol"></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol2</span> <span class="token attr-name">"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol3</span> <span class="token attr-name">"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol4</span> <span class="token attr-name">"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol5</span> <span class="token attr-name">"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol6</span> <span class="token attr-name">"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol7</span> <span class="token attr-name">"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol8</span> <span class="token attr-name">"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol9</span> <span class="token attr-name">"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lolz</span><span class="token punctuation">></span></span><span class="token entity" title="&lol9;">&amp;lol9;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lolz</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><h2 id="补救措施"><a href="#补救措施" class="headerlink" title="补救措施"></a>补救措施</h2> 上面讨论的主要问题就是XML解析器解析了用户发送的不可信数据。然而，要去校验DTD(document type definition)中SYSTEM标识符定义的数据，并不容易，也不大可能。大部分的XML解析器默认对于XXE攻击是脆弱的。因此，最好的解决办法就是配置XML处理器去使用本地静态的DTD，不允许XML中含有任何自己声明的DTD。</li></ol>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目-SNP-用Java打造自己的后端</title>
      <link href="/2018/02/08/snp/"/>
      <url>/2018/02/08/snp/</url>
      <content type="html"><![CDATA[<h1 id="用Java打造自己的后端程序"><a href="#用Java打造自己的后端程序" class="headerlink" title="用Java打造自己的后端程序"></a>用Java打造自己的后端程序</h1><p>现在web编程风气年高，甚至和桌面程序达到了平起平坐的地位，由于其在浏览器中运行，只需要占用少量存储空间且又轻松跨平台，大有取代传统桌面程序的趋势。那么有编程经验的同学看到标题，就要问了，现在主流的后端程序，PHP，JSP都很好用，又何必一遍又一遍的造这个轮子呢？我们学习别人的东西固然重要，能够熟练运用更是值得称赞，然而如果我们想要用的精妙，达到更高层的境界，自然需要对它进行深刻的剖析的理解，这时候通过重造轮子的方法来学习就可以看到一些平常看不到的细节。</p><p>那首先我们就需要了解一些基础的知识。</p><ol><li><h2 id="后端和前端的传纸条"><a href="#后端和前端的传纸条" class="headerlink" title="后端和前端的传纸条"></a><font color="red">后端</font>和<font color="blue">前端</font>的传纸条</h2> 做过全栈的同学肯定知道，前后端交互其实就是两步，第一，写好纸条，就是<code>做好Form表单</code>；第二就是瞄准你要扔的地方（然后趁老师不注意扔过去，咳咳跑题了），就是<code>get/post的url链接</code>。将做好的Form表单通过get/post提交到url链接上，后端就可以通过这个链接收到Form中的信息。</li><li><h2 id="HTTP协议的解析"><a href="#HTTP协议的解析" class="headerlink" title="HTTP协议的解析"></a><font color="green">HTTP协议</font>的解析</h2> 服务器和浏览器既然要互相传纸条，就一定要使用同一种语言，HTTP协议就是这其中最简单最好学的“语言”。其实就是一种格式了，关于这个格式，在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers" target="_blank" rel="noopener">MDN</a>和RFC文档中有详细的定义。简单来讲就是<code>第一行是「请求方法」「空格」「使用的协议/版本号」，接下来都是以冒号分割的键值对形式</code>，如下是我用Java代码获取的Safari请求的请求头（后面会讲到怎么写）<pre><code> GET / HTTP/1.1 Host: 127.0.0.1:9000 Upgrade-Insecure-Requests: 1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0.3 Safari/604.5.6 Accept-Language: zh-cn Accept-Encoding: gzip, deflate Connection: keep-alive</code></pre></li><li><h2 id="写后端用Socket编程？没错！"><a href="#写后端用Socket编程？没错！" class="headerlink" title="写后端用Socket编程？没错！"></a>写<font color="red">后端</font>用<font color="#2faaaa">Socket</font>编程？没错！</h2><p> 其实在我没有做这个东西之前，我一直认为web后端使用很神奇的东西写的，但其实后端就是实现了服务器和浏览器之间的socket通信的程序，但因为HTTP协议是面向无链接的，默认的socket程序如果不手动close的话就会一直保持链接，在浏览器的一边呈现的就是一直在转圈圈读载入条。</p><p> 多说无益，我们现在就写一个hello world。先写一个简短的程序来获取到浏览器的请求头，局部部分如下</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">while</span> <span class="token punctuation">(</span>online<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             server <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             outLP<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已链接: "</span> <span class="token operator">+</span> server<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             inRemote <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             outRemote <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             PrintWriter outRP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>outRemote<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Scanner inRS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>inRemote<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span>inRS<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 String got <span class="token operator">=</span> inRS<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>got<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                 outLP<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>got<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于http是无链接的，所以必须断开socket，表示传输完成</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p> 变量表</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> port<span class="token punctuation">;</span> ServerSocket socket<span class="token punctuation">;</span> Socket server<span class="token punctuation">;</span> InputStream inLocal<span class="token punctuation">;</span> OutputStream outLocal<span class="token punctuation">;</span> InputStream inRemote<span class="token punctuation">;</span> OutputStream outRemote<span class="token punctuation">;</span> <span class="token keyword">boolean</span> online<span class="token punctuation">;</span></code></pre><p> 文件下载</p><ul><li><p><a href="https://res.dedsec.club/HelloWorld.java" target="_blank" rel="noopener">HelloWorld.java</a></p><p>动手试试，你就会发现，哎？不对啊？浏览器怎么一次发这么多请求啊？我在测试的时候，点一次链接，Safari请求了3次，FireFox请求了10次，这是因为如果浏览器没有接收到任何信息，甚至404都没有的时候，就会认为丢包了，会重复发包确认。所以我们要让浏览器知道我们收到包，必须回应一下，当然回应的格式也应该按照HTTP协议的格式来。在这里新建一个类叫<code>Header</code></p><p>属性表</p><pre class=" language-java"><code class="language-java">String protocol<span class="token punctuation">;</span>String protocolVersion<span class="token punctuation">;</span><span class="token keyword">int</span> status_number<span class="token punctuation">;</span>String status<span class="token punctuation">;</span>String Date<span class="token punctuation">;</span>String ContentType<span class="token punctuation">;</span>String charset<span class="token punctuation">;</span></code></pre><p>当然这上面的属性是一般服务器响应头不可或缺的部分，你也可以添加一些自己的东西“搞事”</p><p>为了方便我重写toString将header转化成标准HTTP格式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> protocol <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> protocolVersion <span class="token operator">+</span> <span class="token string">' '</span>          <span class="token operator">+</span> status_number <span class="token operator">+</span> <span class="token string">' '</span>          <span class="token operator">+</span> status <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>          <span class="token string">"Date: "</span> <span class="token operator">+</span> Date <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>          <span class="token string">"Content-Type: "</span> <span class="token operator">+</span> ContentType <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span>          <span class="token string">"charset="</span><span class="token operator">+</span>charset <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在接收浏览器信息之后把我们的信息发出去，注意先发头再发内容。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>inRS<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  String got <span class="token operator">=</span> inRS<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>got<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  outLP<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>got<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>outRP<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outRP<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>试着访问下<br><img src="https://res.dedsec.club/snp/HelloWorld2.png" alt="HelloWorld2_1"><br><img src="https://res.dedsec.club/snp/HelloWorld2_2.png" alt="HelloWorld2_2"></p><p>文件下载</p></li><li><a href="https://res.dedsec.club/HelloWorld_2.java" target="_blank" rel="noopener">HelloWorld_2.java</a></li></ul></li><li><h2 id="用前端传过来的报文“搞事情”"><a href="#用前端传过来的报文“搞事情”" class="headerlink" title="用前端传过来的报文“搞事情”"></a>用<font color="blue">前端</font>传过来的报文“搞事情”</h2><p> 看到这里呢，有灵性的同学们就已经懂了这中间到底是怎么回事了，接下来就很简单了，我们对从浏览器里接受的报文做一个处理，方便我们在后面使用它，为了以后方便，我们新建一个叫Request的类，属性表如下</p><pre class=" language-java"><code class="language-java"> Scanner raw<span class="token punctuation">;</span> InputStream inputStream<span class="token punctuation">;</span> String method<span class="token punctuation">;</span> String url<span class="token punctuation">;</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> param_GET<span class="token punctuation">;</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param_POST<span class="token punctuation">;</span> String protocol<span class="token punctuation">;</span> String protocolVersion<span class="token punctuation">;</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 我们一边接受浏览器传来的报文，一遍进行分类存储，这里呢我选择使用HashMap的形式将原本header中的键值对存储下来（开发版本还未考虑优化）</p><p> 在这个类的构造器中就一次性的将所有信息归类，注意对Post和multipart/form-data请求的特殊处理，在传输文件时尽量使用二进制形式，这样面对上传等一些特殊要求就不会出现问题。</p></li><li><h2 id="后端的“偷梁换柱”"><a href="#后端的“偷梁换柱”" class="headerlink" title="后端的“偷梁换柱”"></a><font color="red">后端</font>的“偷梁换柱”</h2><p> 到目前为止，我们完成了静态网页的提供，但是，一门后端语言之所以被称谓后端语言就是因为它可以提供动态改变网页内容的能力，所以我们新建一个叫Response的类，提供在返回html文档的时候的改变其内容的能力。</p><p> 我在这里，关于如何控制网页该如何改变，使用什么形式的指令，我想了很久，现在 比较火的PHP，JSP都是标签化了，我当然也可以做成这样，但是，我在使用PHP的时候对其随意的代码风格十分讨厌，而JSP又显得冗长。后端语言中我最喜欢的就是node，因为它小巧快捷，透明，跨平台，直接使用js作为后端语言又减少了学习成本，想想，它唯一的缺点可能就是只有异步这一种编程方式了吧，真的是成也异步，败也异步。由此，我就想做一款同步模型的Node。</p><p> 我挑选了json这一文件格式作为源码文件格式，整个文件分成几个部分，由几个固定关键字区分：scope——变量表，script——脚本逻辑处理，return——返回格式调整。（这其中也借鉴了一些Angular）可以看出这样做，虽然对于大片大片的网页处理能力变差，却在ajax异步处理能力上大幅上升。给后端的定位就是，只提供数据，组织数据格式，剩下全部抛给前端，利用浏览器解析js的强大能力实现整个网站的渲染和呈现。这样做好处众多，一来减轻了服务器的压力，二来通过更赞成异步来构建网页，展现的网页将更流畅，体验更好，三来由于交互的数据量不再是大量的整个网页，速度和流量上都有无可比拟的优势。</p><p> 在解析脚本的地方，目前的处理方法是，将一个语句归为3个部分，变量+操作符+表达式（这样的结构很死，这也是我目前最不满意的地方，希望以后知识增加之后，可以改成python或者js的方式），处理完表达式之后，再识别操作符操作变量。</p></li><li><h2 id="「扩展」反射式提供别人开发插件的API"><a href="#「扩展」反射式提供别人开发插件的API" class="headerlink" title="「扩展」反射式提供别人开发插件的API"></a>「<font color="#ff0ff0">扩展</font>」反射式提供别人开发插件的API</h2><p> 这个几乎是现代所有有前途的软件的通用做法， 提供一套api，这样可以大幅度提升软件的生命周期，可以有大量的新鲜血液注入。</p><p> 目前是利用java强大的反射，实现对Java函数中的最多3参函数支持，返回值规定为String</p></li></ol><p>由于后面的几个部分涉及到的内容较多，基础原理也已讲明，故没有提供详细教程，对后续还不清楚的同学可以看这里的<a href="https://github.com/dongmingchao/SNP" target="_blank" rel="noopener">Github源码</a></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2017/12/02/python/"/>
      <url>/2017/12/02/python/</url>
      <content type="html"><![CDATA[<p></p><h1 id="head"><font face="华文彩云">Python学习笔记 <font size="2">by DedSec</font></font></h1><p></p><font color="red">2017/1/22 23:59:31</font>  <hr><font color="apple" face="楷体"><center>重要变量类型</center></font><table><thead><tr><th>父类</th><th>子类</th><th><center>特性</center></th></tr></thead><tbody><tr><td><b><a href="#iter">序列</a></b></td><td>可索引使用的数据(组)</td><td></td></tr><tr><td><b><a href="#dict">字典</a></b></td><td>唯一的<b><font color="gree">映射类型</font></b></td><td>视为无序【按照内部优先级排序】</td></tr><tr><td><b><a href="#function">函数</a></b></td><td></td><td>实现某一功能的算法</td></tr><tr><td>序列</td><td><b><a href="#list">列表</a></b></td><td>可以灵活混合各种类型的数据组</td></tr><tr><td>序列</td><td><b><a href="#tuple">元组</a></b></td><td>数据不能改变的列表</td></tr><tr><td>序列</td><td><b><a href="#str">字符串</a></b></td><td>与元组类似</td></tr></tbody></table><hr><font color="apple" face="楷体"><center>全局关键字</center></font><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><b><a href="#def">def</a></b></td><td>def(ine)声明一个函数</td></tr><tr><td><b><a href="#lambda">lambda</a></b></td><td>类似#define，建立无名函数并返回</td></tr></tbody></table><hr><font color="apple" face="楷体"><center>全局方法</center></font><table><thead><tr><th style="text-align:center">函数名</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"><b><a href="#help">help(function)</a></b></td><td>显示函数相关帮助文档</td></tr><tr><td style="text-align:center"><b><a href="#_type">type(any)</a></b></td><td>返回该参数的类型</td></tr><tr><td style="text-align:center">dir</td><td>返回一个数组，包含所有的属性和方法名</td></tr><tr><td style="text-align:center">__doc__</td><td>返回一个字符串，包含有关的帮助</td></tr><tr><td style="text-align:center">vars</td><td>返回一个字典，包含所有的属性的详细信息</td></tr><tr><td style="text-align:center"><b><a href="#range">range</a></b></td><td>一个从指定数到指定数的序列</td></tr><tr><td style="text-align:center"><b><a href="#sorted">sorted(iterable)</a></b></td><td>返回从大到小排好序的<b><font color="gree">列表，<font color="red">参数类型必须单一，可比</font></font></b></td></tr><tr><td style="text-align:center"><b><a href="#reversed">reversed(iterable)</a></b></td><td>返回与源列表反转之后的<b><font color="gree">序列</font></b></td></tr><tr><td style="text-align:center"><b><a href="#zip">zip</a></b></td><td>将两个序列合并，返回一个多个元组的集合(zip类对象)</td></tr></tbody></table><hr><h4 id="lambda"><font color="darkturquoise">lambda</font><a href="#head">🔙</a></h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">&lt;</span>function <span class="token operator">&lt;</span><span class="token keyword">lambda</span><span class="token operator">></span> at <span class="token number">0x04433810</span><span class="token operator">></span><span class="token operator">//</span>返回一个函数<span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">25</span></code></pre><h4 id="def"><font color="darkturquoise">def</font><b><a href="#head">🔙</a></b></h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">25</span></code></pre><h4 id="sorted"><font color="darkturquoise">sorted(iterable)</font><a href="#head">🔙</a></h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></code></pre><h4 id="reversed"><font color="darkturquoise">reversed(iterable)</font><a href="#head">🔙</a></h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token string">'string'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span>list_reverseiterator object at <span class="token number">0x03BB7510</span><span class="token operator">></span><span class="token operator">//</span>返回一个序列<span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h4 id="zip"><font color="darkturquoise">zip(iterable1,iterable2…)</font><a href="#head">🔙</a></h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> t1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> t2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> zip<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token operator">&lt;</span>zip object at <span class="token number">0x0355F1C0</span><span class="token operator">></span><span class="token operator">//</span>返回一个zip<span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> t3<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="range"><font color="darkturquoise">range(start_integer,stop_integer[,step_integer])</font><a href="#head">🔙</a></h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token operator">//</span>返回一个range<span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'range'</span><span class="token operator">></span></code></pre><blockquote><font color="darkblue" face="宋体">range_obj.start</font><br><font color="gray" face="华文隶书">返回首数</font>  </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>start<span class="token number">0</span></code></pre><blockquote><font color="darkblue" face="宋体">range_obj.stop</font><br><font color="gray" face="华文隶书">返回尾数</font>  </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>stop<span class="token number">10</span></code></pre><blockquote><font color="darkblue" face="宋体">range_obj.count(integer)</font><br><font color="gray" face="华文隶书">查询一个数,若不在range中返回0,存在返回1</font>  </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><blockquote><font color="darkblue" face="宋体">range_obj.step</font><br><font color="gray" face="华文隶书">返回步长</font>  </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> y<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">.</span>step<span class="token number">2</span></code></pre><blockquote><font color="darkblue" face="宋体">range_obj.index(integer)</font><br><font color="gray" face="华文隶书">根据<a><code>元素</code></a>查对应<a><code>编号</code></a></font>  </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token number">3</span></code></pre><blockquote><font color="darkblue" face="宋体">range_obj[integer]</font><br><font color="gray" face="华文隶书">根据<a><code>编号</code></a>查对应<a><code>元素</code></a></font>  </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">4</span></code></pre><hr><h4 id="list"><font color="orange">列表(list)</font><a href="#head">🔙</a></h4><blockquote><font color="darkblue" face="宋体">list(iterable)</font><br><font color="gray" face="华文隶书">序列转为列表</font><br><font color="darkblue" face="宋体">list.sort(list_obj)</font><br><font color="gray" face="华文隶书">按从小到大排序</font><br><font color="darkblue" face="宋体">list.reverse(list_obj)</font><br><font color="gray" face="华文隶书">反转列表</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></code></pre><blockquote><font color="darkblue" face="宋体">list.insert(list_obj,index,object)或者list_obj.insert(index,object)</font><br><font color="gray" face="华文隶书">插入一个元素</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">>></span> list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'insert'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span></code></pre><blockquote><font color="darkblue" face="宋体">list_obj.remove(value)</font><br><font color="gray" face="华文隶书">从列表中去除一个值</font> </blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span></code></pre><blockquote><font color="darkblue" face="宋体">list_obj.extend(iterable)</font><br><font color="gray" face="华文隶书">从尾部追加一个序列</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> y<span class="token operator">=</span><span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span></code></pre><blockquote><font color="darkblue" face="宋体">list_obj.pop(index)</font><br><font color="gray" face="华文隶书">踢出一个元素(默认从尾部)，返回那个元素</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'h'</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'insert'</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span></code></pre><blockquote><font color="darkblue" face="宋体">list_obj.clear()</font><br><font color="gray" face="华文隶书">清空列表</font><br><font color="darkblue" face="宋体">list_obj.copy()</font><br><font color="gray" face="华文隶书">复制列表</font><br><font color="darkblue" face="宋体">list_obj.append(value)</font><br><font color="gray" face="华文隶书">从尾部添加一个元素</font><br><font color="darkblue" face="宋体">list_obj.index(value)</font><br><font color="gray" face="华文隶书">根据<a><code>元素</code></a>查对应<a><code>编号</code></a></font></blockquote><hr><p></p><h4 id="dict"><font color="orange">字典(dict)</font><a href="#head">🔙</a></h4><p></p><p></p><h5 id="dictbuild"><font color="sloblue">字典的建立</font><p></p><blockquote><p><font color="gray" face="华文隶书">直接法</font></p><p><font color="darkblue" face="宋体">dictname={键1:值1,键2:值2}</font><font color="black"></font></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'π'</span><span class="token punctuation">:</span><span class="token number">3.14</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'one'</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">[</span><span class="token string">'π'</span><span class="token punctuation">]</span><span class="token number">3.14</span></code></pre><blockquote><font color="gray" face="华文隶书">赋值法</font><br><font color="darkblue" face="宋体">dict(键1=值1,键2=值2)</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict2<span class="token operator">=</span>dict<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>SyntaxError<span class="token punctuation">:</span> keyword can't be an expression<span class="token operator">//</span>用这种方法键名必须符合变量命名规则，且使用时需要当成字符串<span class="token operator">>></span><span class="token operator">></span> dict2<span class="token operator">=</span>dict<span class="token punctuation">(</span>a1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>a2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict2<span class="token punctuation">{</span><span class="token string">'a2'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'a1'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict2<span class="token punctuation">[</span><span class="token string">'a1'</span><span class="token punctuation">]</span><span class="token number">10</span></code></pre><blockquote><font color="gray" face="华文隶书">元组法</font><br><font color="darkblue" face="宋体">dict(((键1,值1)(键2,值2)))</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token operator">=</span>dict<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">10</span></code></pre><p></p><h5 id="dictfunction"><font color="sloblue">字典的方法</font><p></p><blockquote><font color="darkblue" face="宋体">fromkeys()</font></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><hr><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>父类: 系统基本类</p><p>子类: 基于父类的具备更多功能的类，父类可以直接拓展成子类并获得相关特性——一个序列可以变成元组（不能改变值）可以变成列表（可以改变值）</p><p>list : 所有后面list.function(list_obj,x) &lt;==&gt; list_obj.function(x)</p><p>复制: 在Python中“复制”的含义等同于C语言中的赋值，而“赋值”的含义变成了给一个对象贴标签(即引用)</p></h5></h5>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaFX—0x01</title>
      <link href="/2017/11/06/javafx01/"/>
      <url>/2017/11/06/javafx01/</url>
      <content type="html"><![CDATA[<h1 id="JavaFX教程—Controller"><a href="#JavaFX教程—Controller" class="headerlink" title="JavaFX教程—Controller"></a>JavaFX教程—Controller</h1><p>上一节讲了如何从空白开始建立JavaFX应用，但是这个应用是‘死’的，它没有任何交互的能力，这节来讲一讲如何让应用感应到交互操作</p><h3 id="最好用的操作-gt-setOnAction"><a href="#最好用的操作-gt-setOnAction" class="headerlink" title="最好用的操作 -&gt; setOnAction"></a>最好用的操作 -&gt; <code>setOnAction</code></h3><p>现在，创建一个按钮<code>Button</code>，并让它加入到已经存在的面板上。</p><pre class=" language-java"><code class="language-java">Button click <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"点我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">;</span>click<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>forClick<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了让它能在点击的时候做一些事，写一个方法，根据setOnAction的规定，必需存在一个类型是<code>ActionEvent</code>的参数（这里包括以后，一定要注意是引入javafx包中的，而不是awt中的，也不是beans中的，由于命名相同所以容易混淆），代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">forClick</span><span class="token punctuation">(</span>ActionEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你点击了按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就可以让按钮click被点击的时候，在控制台输出一句”你点击了按钮”。</p><p>上面使用了“方法引用”的特性，有一个缺点是，方法的实现在start方法外部，主面板VBox root在start内部，如果想要使用面板，在面板上添加控件，就必须将root单独抽取出来作为属性，如果是经常使用的面板当然推荐这么做，但是如果是临时性的面板，显然将方法声明到start内部更好。</p><p>下面就使用lambda表达式将点击触发的函数直接写到start内部，通过点击在面板上添加一个Label并显示一行字。</p><pre class=" language-java"><code class="language-java">click<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span>event <span class="token operator">-</span><span class="token operator">></span> root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"你点击了按钮"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://dedsec.club//forhexo/img/javafx/javafx01.gif" alt="效果"></p><h3 id="建立控制器类"><a href="#建立控制器类" class="headerlink" title="建立控制器类"></a>建立控制器类</h3><p>基本的交互操作已经可以轻松实现了，但是，为了增强Java代码的工程性，通常使用一个单独的类来存放所有控件的交互操作，这个类就叫做控制器。</p><p>这个类可以是任何名字，但是根据规范，默认是Controller（因为如果使用默认的JavaFX应用模版，你会发现有个类名为Controller，这就是自动生成的控制器类）</p><p>新建Controller.java后，为了使controller中的操作可以获得界面上的控件，可以写一个setApp方法，将包含面板和控件的类传入。这里我的包含面板和控件的类是默认的Main。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Main app<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApp</span><span class="token punctuation">(</span>Main app<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么规范化以后，刚刚上面的方法就可以这样写</p><p>首先在Main.java中将VBox root作用域提升为属性，同时设置一个界面的Controller对象。</p><pre class=" language-java"><code class="language-java">VBox root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Controller controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>给新的Controller对象设置服务的界面</p><pre class=" language-java"><code class="language-java">controller<span class="token punctuation">.</span><span class="token function">setApp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后在Controller.java中写一个forClick方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">forClick</span><span class="token punctuation">(</span>ActionEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    app<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"你点击了按钮"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在Main.java中使用“方法引用”调用Controller中的forClick方法。</p><pre class=" language-java"><code class="language-java">click<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span>controller<span class="token operator">:</span><span class="token operator">:</span>forClick<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行之后，结果应该和刚才一样。</p><p>Button的OnAction触发点是鼠标点击，但是不同的控件OnAction的默认触发点不同，比如TextField的触发点就是获取焦点后敲击回车。</p>]]></content>
      
      <categories>
          
          <category> JavaFX教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaFX </tag>
            
            <tag> 教程 </tag>
            
            <tag> 桌面应用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker常用操作速查</title>
      <link href="/2017/11/06/docker/"/>
      <url>/2017/11/06/docker/</url>
      <content type="html"><![CDATA[<h1 id="Docker常用操作速查"><a href="#Docker常用操作速查" class="headerlink" title="Docker常用操作速查"></a>Docker常用操作速查</h1><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><h4 id="从官网查询镜像"><a href="#从官网查询镜像" class="headerlink" title="从官网查询镜像"></a>从官网查询镜像</h4><pre class=" language-bash"><code class="language-bash">docker search <span class="token punctuation">[</span>镜像名<span class="token punctuation">]</span></code></pre><h4 id="从官网下载镜像"><a href="#从官网下载镜像" class="headerlink" title="从官网下载镜像"></a>从官网下载镜像</h4><pre class=" language-bash"><code class="language-bash">docker pull <span class="token punctuation">[</span>镜像名<span class="token punctuation">]</span></code></pre><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><pre class=" language-bash"><code class="language-bash">docker run <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名<span class="token punctuation">]</span></code></pre><p>参数解释：</p><ul><li><code>-i</code> 交互模式</li><li><code>-t</code> 启用终端</li><li><code>-d</code> 保持后台运行</li><li><code>--name</code> 设置容器名字</li><li><code>-v</code>映射目录，使用<code>$PWD</code>表示当前目录，本地目录:容器目录</li></ul><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><pre class=" language-bash"><code class="language-bash">docker rmi <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名<span class="token punctuation">]</span></code></pre><h4 id="打包容器为镜像"><a href="#打包容器为镜像" class="headerlink" title="打包容器为镜像"></a>打包容器为镜像</h4><pre class=" language-bash"><code class="language-bash">docker commit <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器名/标签<span class="token punctuation">]</span> <span class="token punctuation">[</span>镜像名<span class="token punctuation">]</span>:<span class="token punctuation">[</span>版本号<span class="token punctuation">]</span></code></pre><p>默认值：版本号=latest<br>可选参数：</p><ul><li><code>-m</code> 描述信息</li><li><code>-a</code> 指定作者</li></ul><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="列出当前正在运行的容器"><a href="#列出当前正在运行的容器" class="headerlink" title="列出当前正在运行的容器"></a>列出当前正在运行的容器</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span></code></pre><p>可选参数：</p><ul><li><code>-a</code> 列出未被删除的容器</li></ul><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre class=" language-bash"><code class="language-bash">docker start</code></pre><h4 id="进入容器的命令行"><a href="#进入容器的命令行" class="headerlink" title="进入容器的命令行"></a>进入容器的命令行</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it <span class="token punctuation">[</span>容器名字/标签<span class="token punctuation">]</span> /bin/bash</code></pre><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><pre class=" language-bash"><code class="language-bash">docker stop</code></pre><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token punctuation">[</span>容器名字/标签<span class="token punctuation">]</span>docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span> <span class="token comment" spellcheck="true">#删除未运行的容器</span></code></pre><p>可选参数：</p><ul><li><code>-f</code> 强制删除容器</li><li><code>-v</code> 删除与容器链接的分卷</li><li><code>-l</code> 删除链接的容器</li></ul><h3 id="容器实例"><a href="#容器实例" class="headerlink" title="容器实例"></a>容器实例</h3><p>更多容器实例推荐在<a href="http://www.runoob.com/docker/docker-install-nginx.html" target="_blank" rel="noopener">这里</a></p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><pre class=" language-bash"><code class="language-bash">docker pull mysql<span class="token function">mkdir</span> -p docker_v/mysql/conf<span class="token function">cd</span> docker_v/mysql/conf<span class="token function">touch</span> my.cnfdocker run -p 3306:3306 --name mysql -v /opt/docker_v/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token punctuation">[</span>密码<span class="token punctuation">]</span> -d mysql</code></pre><p>参数解释：</p><ul><li><code>-p</code> 端口映射 本地:容器</li><li><code>-e MYSQL_ROOT_PASSWORD</code> 设置初始密码</li><li><code>-d</code> 保持后台运行</li></ul>]]></content>
      
      <categories>
          
          <category> 速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaFX--0x00</title>
      <link href="/2017/11/05/javafx00/"/>
      <url>/2017/11/05/javafx00/</url>
      <content type="html"><![CDATA[<h1 id="JavaFX教程–0x00"><a href="#JavaFX教程–0x00" class="headerlink" title="JavaFX教程–0x00"></a>JavaFX教程–0x00</h1><hr><p>JavaFX是Java最新的GUI体系，代替了界面略丑的swing，而且使用了与web设计相仿的设计理念，使用者可以使用fxml快速构建JavaFX程序界面，也可以使用JavaFX的CSS来实现快速更换主题等等的目地。就是感觉运行速度上略低于swing，所以swing仍是开发小型工具的首选。</p><font color="red">如果您使用OpenJDK构建JavaFX应用，需要单独下载JavaFX源码编译(不推荐)，否则将报错相关的程序包不存在。请移步<a href="https://wiki.openjdk.java.net/display/OpenJFX/Building+OpenJFX" target="_blank" rel="noopener">OpenJFX开源项目</a></font><h2 id="开始动手–第一个JavaFX程序"><a href="#开始动手–第一个JavaFX程序" class="headerlink" title="开始动手–第一个JavaFX程序"></a>开始动手–第一个JavaFX程序</h2><h4 id="从空白开始"><a href="#从空白开始" class="headerlink" title="从空白开始"></a>从空白开始</h4><p>新建一个项目，可以是普通的项目(推荐)，如果你的IDE提供JavaFX项目，也可以新建JavaFX项目，这样IDE会引入一些相关文件，但是可能有些初学者会觉得IDE提供的文件过多有些混乱，所以这里统一从普通项目开始。<br>请善用IDE的自动导入包功能</p><h5 id="1-让类继承Application类"><a href="#1-让类继承Application类" class="headerlink" title="1. 让类继承Application类"></a>1. 让类继承Application类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span></code></pre><h5 id="2-重写start方法"><a href="#2-重写start方法" class="headerlink" title="2. 重写start方法"></a>2. 重写start方法</h5><p>extends之后IDE应该就会报错，原因是继承<code>Application</code>类之后必需重写<code>start</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span>Stage primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception</code></pre><h5 id="3-设置开始的布局"><a href="#3-设置开始的布局" class="headerlink" title="3. 设置开始的布局"></a>3. 设置开始的布局</h5><p>在start方法內写入你希望所有容器的父容器的类型<br>可选类型：</p><ul><li>BorderPane 边界式布局</li><li>AnchorPane 锚点布局，使用坐标确定控件位置</li><li>VBox 相当于只有一列但无限长的网格式布局</li><li>HBox 相当于只有一行但无限长的网格式布局</li><li>GridPane  网格式布局</li><li>Accordion 手风琴式布局</li><li>FlowPane  流式布局</li></ul><p>还有一部分这里就不再列出，可以参考官方文档，有关各种界面的表现可以参考<a href="http://www.yiibai.com/javafx/" target="_blank" rel="noopener">这里</a>。我这里使用VBox。</p><pre class=" language-java"><code class="language-java">VBox root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-显示布局"><a href="#4-显示布局" class="headerlink" title="4. 显示布局"></a>4. 显示布局</h5><p>在JavaFX中，规定最下层是Stage，由Stage呈放Scene，再由Scene呈放Pane。<br>在start方法中继续添加：</p><pre class=" language-java"><code class="language-java">primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置标题</span>primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">275</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置宽高</span>primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示出来</span></code></pre><p>最后，将main方法改成这样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行，会显示如下，不同的操作系统细节会略微不同，笔者是MacOS的运行结果。</p><p><img src="http://dedsec.club/forhexo/img/javafx/javafx001.png" alt="javafx001"></p>]]></content>
      
      <categories>
          
          <category> JavaFX教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaFX </tag>
            
            <tag> 教程 </tag>
            
            <tag> 桌面应用 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
